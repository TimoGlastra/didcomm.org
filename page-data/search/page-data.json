{
    "componentChunkName": "component---src-templates-search-search-tsx",
    "path": "/search/",
    "result": {"pageContext":{"allProtocols":[{"slug":"action-menu/1.0/","title":"Action Menu","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"1.0","status":"Production","summary":"A protocol that allows one Agent to present a set of heirarchical menus and actions to another user-facing Agent in a human friendly way.","modifiedDate":"Sun Aug 07 2022 19:02:01 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/action-menu/1.0","html":"Details\nThis protocol is defined here: https://github.com/hyperledger/aries-rfcs/blob/main/features/0509-action-menu/README.md"},{"slug":"action-menu/2.0/","title":"Action Menu","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"2.0","status":"Production","summary":"A protocol that allows one Agent to present a set of heirarchical menus and actions to another user-facing Agent in a human friendly way.","modifiedDate":"Wed Aug 10 2022 19:27:17 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/action-menu/2.0","html":"Summary\nThe action-menu protocol allows one Agent to present a set of heirarchical menus and actions to another user-facing Agent in a human friendly way. The protocol allows limited service discovery as well as simple data entry. While less flexible than HTML forms or a chat bot, it should be relatively easy to implement and provides a user interface which can be adapted for various platforms, including mobile agents.\nMotivation\nDiscovery of a peer Agent's capabilities or service offerings is currently reliant on knowledge obtained out-of-band. There is no in-band DIDComm supported protocol for querying a peer to obtain a human freindly menu of their capabilities or service offerings. Whilst this protocol doesn't offer ledger wide discovery capabilities, it will allow one User Agent connected to another, to present a navigable menu and request offered services. The protocol also provides an interface definition language to define action menu display, selection and request submission.\nRoles\nThere are two roles in this protocol:\n\nrequester : The requester asks the responder for menu definitions, presents them to a user, and initiates subsequent action items from the menu through further requests to the responder.\nresponder : The responder presents an initial menu definition containing actionable elements to a requester and then responds to subsequent action requests from the menu.\n\nBasic Walkthrough\nThe action-menu protocol requires an active DIDComm connection before it can proceed. One Agent behaves as a requester in the protocol whilst the other Agent represents a responder. Conceptually the responder presents a list of actions which can be initiated by the requester. Actions are contained within a menu structure. Individual Actions may result in traversal to another menu or initiation of other protocols such as a presentation request, an introduction proposal, a credential offer, an acknowledgement, or a problem report.\nThe protocol can be initiated by either the requester asking for the root menu or the responder sending an unsolicited root menu. The protocol ends when the requester issues a perform operation or an internal timeout on the responder causes it to discard menu context. At any time a requester can reset the protocol by requesting the root menu from a responder.\nWhilst the protocol is defined here as uni-directional (i.e requester to responder), both Agents may support both requester and responder roles simultaneously. Such cases would result in two instances of the action-menu protocol operating in parrallel.\nStates\n\nStates for Requester\n\nState\nDescription\n\nnull\nNo menu has been requested or received\n\nawaiting-root-menu\nmenu-request message has been sent and awaiting root menu response\n\npreparing-selection\nmenu message has been received and a user selection is pending\n\ndone\nperform message has been sent and protocol has finished. Perform actions can include requesting a new menu which will re-enter the state machine with the receive-menu event from the null state.\n\nStates for Responder\n\nState\nDescription\n\nnull\nNo menu has been requested or sent\n\npreparing-root-menu\nmenu-request message has been received and preparing menu response for root menu\n\nawaiting-selection\nmenu message has been sent and are awaiting a perform request\n\ndone\nperform message has been received and protocol has finished. Perform actions can include requesting a new menu which will re-enter the state machine with the send-menu event from the null state.\n\nDesign By Contract\nNo protocol specific errors exist. Any errors related to headers or other core features are documented in the appropriate places.\nSecurity\nThis protocol expects messages to be encrypted during transmission, and repudiable.\nComposition\n\nSupported Goal Code\nNotes\n\n|       \n                 |\n\nMessage Reference\nMenu\nA requester is expected to display only one active menu per connection when action menus are employed by the responder. A newly received menu is not expected to interrupt a user, but rather be made available for the user to inspect possible actions related to the responder.\nMessage Type URI: https://didcomm.org/action-menu/2.0/menu\n{\n  \"type\": \"https://didcomm.org/action-menu/2.0/menu\",\n  \"id\": \"5678876542344\",\n  \"body\": {\n    \"title\": \"Welcome to IIWBook\",\n    \"description\": \"IIWBook facilitates connections between attendees by verifying attendance and distributing connection invitations.\",\n    \"errormsg\": \"No IIWBook names were found.\",\n    \"options\": [\n        {\n        \"name\": \"obtain-email-cred\",\n        \"title\": \"Obtain a verified email credential\",\n        \"description\": \"Connect with the BC email verification service to obtain a verified email credential\"\n        },\n        {\n        \"name\": \"verify-email-cred\",\n        \"title\": \"Verify your participation\",\n        \"description\": \"Present a verified email credential to identify yourself\"\n        },\n        {\n        \"name\": \"search-introductions\",\n        \"title\": \"Search introductions\",\n        \"description\": \"Your email address must be verified to perform a search\",\n        \"disabled\": true\n        }\n    ]\n  }\n}\n\nwhere:\n\ntitle : plain text string, should be displayed at the top of the menu\n\ndescription -- plain text string, should be shown in smaller text below the title bar\n\nerrormsg : optional plain text string sent to indicate that the last perform request did not work as expected. The text should be presented to the user in the title section\noptions : one or more available actions which the responder supports and may be requested in a perform message.\ndisabled : optional indication that an option is unavailable due to certain requirements not yet being met\n\nQuick forms\nMenu options may define a form property, which would direct the requester user to a client-generated form when the menu option is selected. The menu title should be shown at the top of the form, followed by the form description text if defined, followed by the list of form params in sequence. The form should also include a Cancel button to return to the menu, a Submit button (with an optional custom label defined by submit-label), and optionally a Clear button to reset the parameters to their default values.\n{\n  \"type\": \"https://didcomm.org/action-menu/2.0/menu\",\n  \"id\": \"5678876542347\",\n  \"thid\": \"5678876542344\",\n  \"title\": \"Attendance Verified\",\n  \"body\": {\n    \"description\": \"\",\n    \"options\": [\n        {\n        \"name\": \"submit-invitation\",\n        \"title\": \"Submit an invitation\",\n        \"description\": \"Send an invitation for IIWBook to share with another participant\"\n        },\n        {\n        \"name\": \"search-introductions\",\n        \"title\": \"Search introductions\",\n        \"form\": {\n            \"description\": \"Enter a participant name below to perform a search.\",\n            \"params\": [\n            {\n                \"name\": \"query\",\n                \"title\": \"Participant name\",\n                \"default\": \"\",\n                \"description\": \"\",\n                \"required\": true,\n                \"type\": \"text\"\n            }\n            ],\n            \"submit-label\": \"Search\"\n        }\n        }\n    ]\n  }\n}\n\nWhen the form is submitted, a perform message is generated containing values entered in the form. The form block may have an empty or missing params property in which case it acts as a simple confirmation dialog.\nEach entry in the params list must define a name and title. The description is optional (should be displayed as help text below the field) and the type defaults to ‘text’ if not provided (only the ‘text’ type is supported at this time). Parameters should default to required true, if not specified. Parameters may also define a default value (used when rendering or clearing the form).\nMenu Request\nIn addition to menus being pushed by the responder, the root menu can be re-requested at any time by the requester sending a menu-request.\nMessage Type URI: https://didcomm.org/action-menu/2.0/menu-request\n{\n  \"type\": \"https://didcomm.org/action-menu/2.0/menu-request\",\n  \"id\": \"5678876542347\",\n}\n\nPerform\nWhen the requester user actions a menu option, a perform message is generated. It should be attached to the same thread as the menu. The active menu should close when an option is selected.\nThe response to a perform message can be any type of agent message, including another menu message, a presentation request, an introduction proposal, a credential offer, an acknowledgement, or a problem report. Whatever the message type, it should normally reference the same message thread as the perform message.\nMessage Type URI: https://didcomm.org/action-menu/2.0/perform\n{\n  \"type\": \"https://didcomm.org/action-menu/2.0/perform\",\n  \"id\": \"5678876542346\",\n  \"thid\": \"5678876542344\"\n  \"body\":{\n    \"name\": \"obtain-email-cred\",\n    \"params\": {}\n  }\n}\n\nwhere:\n\nname : the menu option being requested. This is taken from the name attribute of the options array elements in the menu\nparams : optional dictionary containing any input parameters requested in a menu option form section. The dictionary key values are taken from the name attributes of params array elements in the menu option form.\n\nL10n\nLocalization may be implemented by means of L10n extension\nImplementations\nEndnotes\nFuture Considerations\n\nThere needs to be some consideration around how the protocol may terminate due to responder side timeouts since maintaining menu context for connections consumes resources. Adoption of Report Problem Protocol 2.0 is a viable solution"},{"slug":"basicmessage/1.0/","title":"Basic Message","tags":[],"license":"MIT","publisher":"TelegramSam","avatar":"https://avatars.githubusercontent.com/u/411919?v=4&s=48","version":"1.0","status":"Production","summary":"The BasicMessage protocol describes a stateless, easy to support user message protocol. It has a single message type used to communicate.","modifiedDate":"Tue Oct 26 2021 16:32:25 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/basicmessage/1.0","html":"Details\nThis protocol is defined here: https://github.com/hyperledger/aries-rfcs/tree/main/features/0095-basic-message"},{"slug":"basicmessage/2.0/","title":"BasicMessage","tags":[],"license":"MIT","publisher":"TelegramSam","avatar":"https://avatars.githubusercontent.com/u/411919?v=4&s=48","version":"2.0","status":"Production","summary":"The BasicMessage protocol describes a stateless, easy to support user message protocol. It has a single message type used to communicate.","modifiedDate":"Sat Oct 09 2021 16:06:28 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/basicmessage/2.0","html":"Roles\nThere are two roles in this protocol: sender and receiver. It is anticipated that both roles are supported by agents that provide an interface for humans, but it is possible for an agent to only act as a sender (do not process received messages) or a receiver (will never send messages).\nConnectivity\nThere are no assumptions about this protocol. It can be used to send a message, and there is no protocol level expectation of a response.\nStates\nThere are not really states in this protocol, as sending a message leaves both parties in the same state they were before.\nBasic Walkthrough\nUsing this protocol, either party can send a message to the other at any time. There are no rules about taking turns or requiring a response.\nMessages are assumed to be made visible to the recipient or evaluated by automated processes.\nDesign By Contract\nNo protocol specific errors exist. Any errors related to headers or other core features are documented in the appropriate places.\nSecurity\nThis protocol expects messages to be encrypted during transmission, and repudiable.\nComposition\n\nSupported Goal Code\nNotes\n\n|       \n                 |\n\nMessage Reference\nmessage\nMessage Type URI: https://didcomm.org/basicmessage/2.0/message\nThe message message is sent by the sender to the recipient. Note that the role is only specific to the creation of messages, and that both parties may play both roles.\nAttributes:\ncontent - content of the user intended message.\nSupported decorators/headers:\n\nThe message should indicate the language used in the message. DIDComm V1 and DIDComm V2 have different methods for this. See examples below.\nThe time the message is sent must be included. DIDComm V2 uses the created_time header. DIDComm V1 must include a sent_time as a message attribute containing the timestamp in ISO 8601 UTC format.\n\nDIDComm V1 Example:\n{\n    \"@id\": \"123456780\",\n    \"@type\": \"https://didcomm.org/basicmessage/2.0/message\",\n    \"~l10n\": { \"locale\": \"en\" },\n    \"sent_time\": \"2019-01-15 18:42:01Z\",\n    \"content\": \"Your hovercraft is full of eels.\"\n}\n\nDIDComm V2 Example:\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/basicmessage/2.0/message\",\n    \"lang\": \"en\",\n    \"created_time\": 1547577721,\n    \"body\": {\n        \"content\": \"Your hovercraft is full of eels.\"\n    }\n}\n\nL10n\nThe language  SHOULD be specified according to the method used in the DIDComm base protocol version.\nImplementations\nEndnotes\n1 Out of Scope\nThere are many useful features of user messaging systems that we will not be adding to this protocol. We anticipate the development of more advanced and full-featured message protocols to fill these needs. Features that are considered out of scope for this protocol include:\n\nread receipts\nemojii responses\ntyping indicators\nmessage replies (threading)\nmulti-party (group) messages\nattachments"},{"slug":"discover-features/2.0/","title":"Discover Features","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"2.0","status":"Production","summary":"This protocol, defined in the DIDComm Messaging Spec, helps agents query one another to discover which features they support, and to what extent.","modifiedDate":"Sun Jul 31 2022 22:27:01 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/discover-features/2.0","html":"Details\nThe version 2.0 of this protocol was originally introduced in Aries RFC 0557: Discover Features Protocol v2.x. A DIDComm v2 version was updated and included in the specification here: https://identity.foundation/didcomm-messaging/spec/#discover-features-protocol-20.\nYou can find the detail of the protocol in above-mentioned references. Semantics of both DIDComm v1 and v2 are similar, only differing in message decorators and headers as follows:\nQuery Message\n\nDIDComm v1 example\n\n{\n  \"@type\": \"https://didcomm.org/discover-features/2.0/queries\",\n  \"@id\": \"yWd8wfYzhmuXX3hmLNaV5bVbAjbWaU\",\n  \"queries\": [\n    { \"feature-type\": \"protocol\", \"match\": \"https://didcomm.org/tictactoe/1.*\" },\n    { \"feature-type\": \"goal-code\", \"match\": \"aries.*\" }\n  ]\n}\n\nDIDComm v2 example\n\n{\n    \"type\": \"https://didcomm.org/discover-features/2.0/queries\",\n    \"id\": \"yWd8wfYzhmuXX3hmLNaV5bVbAjbWaU\",\n    \"body\": {\n        \"queries\": [\n            { \"feature-type\": \"protocol\", \"match\": \"https://didcomm.org/tictactoe/1.*\" },\n            { \"feature-type\": \"goal-code\", \"match\": \"org.didcomm.*\" }\n        ]\n    }\n}\n\nDisclose Message\n\nDIDComm v1 example\n\n{\n  \"@type\": \"https://didcomm.org/discover-features/2.0/disclosures\",\n  \"~thread\": { \"thid\": \"yWd8wfYzhmuXX3hmLNaV5bVbAjbWaU\" },\n  \"disclosures\": [\n    {\n      \"feature-type\": \"protocol\",\n      \"id\": \"https://didcomm.org/tictactoe/1.0\",\n      \"roles\": [\"player\"]\n    },\n    {\n      \"feature-type\": \"goal-code\",\n      \"id\": \"aries.sell.goods.consumer\"\n    }\n  ]\n}\n\nDIDComm v2 example\n\n{\n    \"type\": \"https://didcomm.org/discover-features/2.0/disclose\",\n    \"thid\": \"yWd8wfYzhmuXX3hmLNaV5bVbAjbWaU\",\n    \"body\":{\n        \"disclosures\": [\n            {\n                \"feature-type\": \"protocol\",\n                \"id\": \"https://didcomm.org/tictactoe/1.0\",\n                \"roles\": [\"player\"]\n            },\n            {\n                \"feature-type\": \"goal-code\",\n                \"id\": \"org.didcomm.sell.goods.consumer\"\n            }\n        ]\n    }\n}"},{"slug":"discover-features/3.0/","title":"Discover Features","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"3.0","status":"Production","summary":"This protocol, defined in the DIDComm Messaging Spec, helps agents query one another to discover which features they support, and to what extent.","modifiedDate":"Sun Jul 31 2022 20:45:59 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/discover-features/2.0","html":"Details\nThis Protocol is defined within the didcomm-messaging spec, currently located here: https://identity.foundation/didcomm-messaging/spec/#discover-features-protocol-20"},{"slug":"mediator-coordination/1.0/","title":"Mediator Coordinator","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"1.0","status":"Production","summary":"A protocol to coordinate mediation configuration between a mediating agent and the recipient.","modifiedDate":"Sat Jul 16 2022 20:32:35 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/mediator-coordination/1.0","html":"Details\nThis protocol is defined here: https://github.com/hyperledger/aries-rfcs/tree/main/features/0211-route-coordination"},{"slug":"mediator-coordination/2.0/","title":"Mediator Coordinator","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"2.0","status":"Production","summary":"A protocol to coordinate mediation configuration between a mediating agent and the recipient.","modifiedDate":"Thu Aug 25 2022 17:32:05 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/coordinate-mediation/2.0","html":"Motivation\nUse of the forward message in the Routing Protocol 2.0 requires an exchange of information. The Recipient must know which endpoint and routing key(s) to share, and the Mediator needs to know which keys should be routed via this relationship.\nRoles\nThere are two roles in this protocol:\n\nmediator : The agent that will be receiving forward messages on behalf of the recipient.\nrecipient : The agent for whom the forward message payload is intended.\n\nConnectivity\nThis protocol consists of three different message requests from the recipient that should be replied by the mediator :\n\nMediate Request -> Mediate Grant or Mediate Deny\nKeylist Update -> Keylist Update Response\nKeylist Query -> Keylist\n\nStates\nThis protocol follows the request-response message exchange pattern, and only requerires the simple state of waiting for a response or to produce a response.\nBasic Walkthrough\nA recipient may discover an agent capable of routing using the Discover Features Protocol 2.0. If protocol is supported with the mediator, a recipient may send a mediate-request to initiate a routing relationship.\nFirst, the recipient sends a mediate-request message to the mediator. If the mediator is willing to route messages, it will respond with a mediate-grant message, otherwise with a mediate-deny message. The recipient will share the routing information in the grant message with other contacts.\nWhen a new key is used by the recipient, it must be registered with the mediator to enable route identification. This is done with a keylist-update message.\nThe keylist-update and keylist-query methods are used over time to identify and remove keys that are no longer in use by the recipient.\nDesign By Contract\nNo protocol specific errors exist. Any errors related to headers or other core features are documented in the appropriate places.\nSecurity\nThis protocol expects messages to be encrypted during transmission, and repudiable.\nComposition\n\nSupported Goal Code\nNotes\n\n|       \n                 |\n\nMessage Reference\nMediate Request\nThis message serves as a request from the recipient to the mediator, asking for the permission (and routing information) to publish the endpoint as a mediator.\nMessage Type URI: https://didcomm.org/coordinate-mediation/2.0/mediate-request\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/2.0/mediate-request\",\n}\n\nMediate Deny\nThis message serves as notification of the mediator denying the recipient 's request for mediation.\nMessage Type URI: https://didcomm.org/coordinate-mediation/2.0/mediate-deny\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/2.0/mediate-deny\",\n}\n\nMediate Grant\nA mediate grant message is a signal from the mediator to the recipient that permission is given to distribute the included information as an inbound route.\nMessage Type URI: https://didcomm.org/coordinate-mediation/2.0/mediate-grant\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/2.0/mediate-grant\",\n    \"body\": \n            {\n                \"routing_did\": [\"did:peer:z6Mkfriq1MqLBoPWecGoDLjguo1sB9brj6wT3qZ5BxkKpuP6\"]\n            }\n}\n\nwhere:\n\nrouting_did : DID of the mediator where forwarded messages should be sent. The recipient may use this DID as an enpoint as explained in Using a DID as an endpoint section of the specification.\n\nKeylist Update\nUsed to notify the mediator of keys in use by the recipient.\nMessage Type URI: https://didcomm.org/coordinate-mediation/2.0/keylist-update\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/2.0/keylist-update\",\n    \"body\": \n            {\n                \"updates\":  [\n                                {\n                                    \"recipient_did\": \"did z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH\",\n                                    \"action\": \"add\"\n                                }\n                            ]\n            }\n}\n\nwhere:\n\nrecipient_did : DID subject of the update.\naction : one of add or remove.\n\nKeylist Response\nConfirmation of requested keylist updates.\nMessage Type URI: https://didcomm.org/coordinate-mediation/2.0/keylist-update-response\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/2.0/keylist-update-response\",\n    \"body\": \n            {\n                \"updated\":  [\n                                {\n                                    \"recipient_did\": \"did z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH\",\n                                    \"action\": \"\" // \"add\" or \"remove\"\n                                    \"result\": \"\" // [client_error | server_error | no_change | success]\n                                }\n                            ]\n            }\n}\n\nwhere:\n\nrecipient_did : DID subject of the update.\naction : one of add or remove.\nresult : one of client_error, server_error, no_change, success; describes the resulting state of the keylist update.\n\nKeylist Query\nQuery mediator for a list of keys registered for this connection.\nMessage Type URI: https://didcomm.org/coordinate-mediation/2.0/keylist-query\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/2.0/keylist-query\",\n    \"body\": \n            {\n                \"paginate\": {\n                                \"limit\": 30,\n                                \"offset\": 0\n                            }\n            }\n}\n\nwhere:\n\npaginate : is optional, and if present must include limit and offset.\n\nKeylist\nResponse to key list query, containing retrieved keys.\nMessage Type URI: https://didcomm.org/coordinate-mediation/2.0/keylist\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/coordinate-mediation/2.0/keylist\",\n    \"body\": \n            {\n                \"keys\": [\n                            {\n                                \"recipient_did\": \"did z6MkpTHR8VNsBxYAAWHut2Geadd9jSwuBV8xRoAnwWsdvktH\"\n                            }\n                        ]\n                \"pagination\":   {\n                                    \"count\": 30,\n                                    \"offset\": 30,\n                                    \"remaining\": 100\n                                }\n            }\n}\n\nwhere:\n\npagination : is optional, and if present must include count, offset and remaining.\n\nL10n\nNo localization is required.\nImplementations\nEndnotes\nFuture Considerations\n\nShould we allow listing keys by date? You could query keys in use by date?\nWe are missing a way to check a single key (or a few keys) without doing a full list.\nMediation grant supports only one endpoint. What can be done to support multiple endpoint options i.e. http, ws, etc.\nRequiring proof of key ownership (with a signature) would prevent an edge case where a malicious party registers a key for another party at the same mediator, and before the other party.\nHow do we express terms and conditions for mediation?"},{"slug":"out-of-band/2.0/","title":"Out Of Band","tags":[],"license":"MIT","publisher":"TelegramSam","avatar":"https://avatars.githubusercontent.com/u/411919?v=4&s=48","version":"2.0","status":"Production","summary":"The Out Of Band protocol defined in the DIDComm Messaging Spec. This enables encoding of messages within QR code and URLs","modifiedDate":"Sat Oct 09 2021 16:02:10 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/out-of-band/2.0","html":"Details\nThis Protocol is defined within the didcomm-messaging spec, currently located here: https://identity.foundation/didcomm-messaging/spec/#out-of-band-messages"},{"slug":"pickup/1.0/","title":"Pickup","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"1.0","status":"Production","summary":"A protocol to facilitate an agent picking up messages held at a mediator.","modifiedDate":"Sun Jul 17 2022 19:19:31 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/messagepickup/1.0","html":"Details\nThis protocol is defined here: https://github.com/hyperledger/aries-rfcs/tree/main/features/0212-pickup"},{"slug":"pickup/2.0/","title":"Pickup","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"2.0","status":"Production","summary":"A protocol to facilitate an agent picking up messages held at a mediator.","modifiedDate":"Sun Jul 17 2022 19:19:31 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/messagepickup/2.0","html":"Details\nThis protocol is defined here: https://github.com/hyperledger/aries-rfcs/tree/main/features/0685-pickup-v2"},{"slug":"pickup/3.0/","title":"Pickup","tags":[],"license":"MIT","publisher":"rodolfomiranda","avatar":"https://avatars.githubusercontent.com/u/2913773?v=4&s=48","version":"3.0","status":"Production","summary":"A protocol to facilitate an agent picking up messages held at a mediator.","modifiedDate":"Sun Jul 17 2022 19:19:31 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/messagepickup/3.0","html":"Motivation\nMessages can be picked up simply by sending a message to the Mediator with a return_route header specified. This mechanism is implicit, and lacks some desired behavior made possible by more explicit messages.\nThis protocol is the explicit companion to the implicit method of picking up messages.\nRoles\nThere are two roles in this protocol:\n\nmediator : The agent that has messages waiting for pickup by the recipient.\nrecipient : The agent who is picking up messages from the mediator.\n\nConnectivity\nThis protocol consists of three different message requests from the recipient that should be replied by the mediator :\n\nStatus Request -> Status\nDelivery Request -> Message Delivery\nMessage Received -> Status\nLive Mode  -> Status or Problem Report\n\nStates\nThis protocol follows the request-response message exchange pattern, and only requires the simple state of waiting for a response or to produce a response.\nAdditionally, the return_route header extension must be set to all in all request submitted by the recipient.\nBasic Walkthrough\nThe status-request message is sent by the recipient to the mediator to query how many messages are pending.\nThe status message is the response to status-request to communicate the state of the message queue.\nThe delivery-request message is sent by the recipient to request delivery of pending messages.\nThe message-delivery message is the response to the delivery-request to send queued messages back to the recipient.\nThe message-received message is sent by the recipient to confirm receipt of delivered messages, prompting the mediator to clear messages from the queue.\nThe live-delivery-change message is used to set the state of live_delivery.\nWhen Live Mode is enabled, messages that arrive when an existing connection exists are delivered over the connection immediately, rather than being pushed to the queue. See Live Mode below for more details.\nSecurity\nThis protocol expects messages to be encrypted during transmission, and repudiable.\nComposition\n\nSupported Goal Code\nNotes\n\n|       \n                 |\n\nMessage Reference\nStatus Request\nSent by the recipient to the mediator to request a status message.\nMessage Type URI: https://didcomm.org/messagepickup/3.0/status-request\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/messagepickup/3.0/status-request\",\n    \"body\" : {\n        \"recipient_key\": \"\"\n    },\n    \"return_route\": \"all\"\n}\n\nrecipient_key is optional. When specified, the mediator MUST only return status related to that recipient key. This allows the recipient to discover if any messages are in the queue that were sent to a specific key. You can find more details about recipient_key and how it's managed in Mediator Coordination Protocol.\nStatus\nStatus details about waiting messages.\nMessage Type URI: https://didcomm.org/messagepickup/3.0/status\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/messagepickup/3.0/status\",\n    \"body\": {\n            \"recipient_key\": \"\",\n            \"message_count\": 7,\n            \"longest_waited_seconds\": 3600,\n            \"newest_received_time\": 1658085169,\n            \"oldest_received_time\": 1658084293,\n            \"total_bytes\": 8096,\n            \"live_delivery\": false\n    }\n}\n\nmessage_count is the only REQUIRED attribute. The others MAY be present if offered by the mediator.\nlongest_waited_seconds is in seconds, and is the longest delay of any message in the queue.\nnewest_received_time and oldest_received_time are expressed in UTC Epoch Seconds (seconds since 1970-01-01T00:00:00Z) as an integer.\ntotal_bytes represents the total size of all messages.\nIf a recipient_key was specified in the status-request message, the matching value MUST be specified in the recipient_key attribute of the status message.\nlive_delivery state is also indicated in the status message.\nNote : due to the potential for confusing what the actual state of the message queue is, a status message MUST NOT be put on the pending message queue and MUST only be sent when the recipient is actively connected (HTTP request awaiting response, WebSocket, etc.).\nDelivery Request\nA request from the recipient to the mediator to have pending messages delivered.\nMessage Type URI: https://didcomm.org/messagepickup/3.0/delivery-request\n{\n    \"id\": \"123456780\",\n    \"type\": \"ttps://didcomm.org/messagepickup/3.0/delivery-request\",\n    \"body\": {\n        \"limit\": 10,\n        \"recipient_key\": \"\"\n    },\n    \"return_route\": \"all\"\n}\n\nlimit is a REQUIRED attribute, and after receipt of this message, the mediator SHOULD deliver up to the limit indicated.\nrecipient_key is optional. When specified, the mediator MUST only return messages sent to that recipient key.\nIf no messages are available to be sent, a status message MUST be sent immediately.\nDelivered messages MUST NOT be deleted until delivery is acknowledged by a messages-received message.\nMessage Delivery\nBatch of messages delivered to the receiver as attachments.\nMessage Type URI: https://didcomm.org/messagepickup/3.0/delivery\n{\n    \"id\": \"123456780\",\n    \"thid\": \"\",\n    \"type\": \"https://didcomm.org/messagepickup/3.0/delivery\",\n    \"body\": {\n        \"recipient_key\": \"\"\n    },\n    \"attachments\": [{\n        \"id\": \"\",\n        \"data\": {\n            \"base64\": \"\"\n        }\n    }]\n}\n\nMessages delivered from the queue must be delivered in a batch delivery message as attachments, with a batch size specified by the limit provided in the delivery-request message. The id of each attachment is used to confirm receipt. The id is an opaque value, and the recipient should not infer anything from the value.\nThe ONLY valid type of attachment for this message is a DIDComm v2 Message in encrypted form.\nThe recipient_key attribute is only included when responding to a delivery-request message that indicates a recipient_key.\nMessages Received\nAfter receiving messages, the recipient sends an acknowledge message indiciating which messages are safe to clear from the queue.\nMessage Type URI: https://didcomm.org/messagepickup/3.0/messages-received\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/messagepickup/3.0/messages-received\",\n    \"body\": {\n        \"message_id_list\": [\"123\",\"456\"]\n    }\n}\n\nmessage_id_list is a list of ids of each message received. The id of each message is present in the attachment descriptor of each attached message of a delivery message.\nUpon receipt of this message, the mediator knows which messages have been received, and can remove them from the collection of queued messages with confidence. The mediator SHOULD send an updated status message reflecting the changes to the queue.\nMultiple Recipients\nIf a message arrives at a mediator addressed to multiple recipients, the message MUST be queued for each recipient independently. If one of the addressed recipients retrieves a message and indicates it has been received, that message MUST still be held and then removed by the other addressed recipients.\nLive Mode\nLive Mode is the practice of delivering newly arriving messages directly to a connected recipient. It is disabled by default and only activated by the recipient. Messages that arrive when Live Mode is off MUST be stored in the queue for retrieval as described above. If Live Mode is active, and the connection is broken, a new inbound connection starts with Live Mode disabled.\nMessages already in the queue are not affected by Live Mode; they must still be requested with delivery-request messages.\nLive Mode MUST only be enabled when a persistent transport is used, such as WebSockets.\nRecipients have three modes of possible operation for message delivery with various abilities and level of development complexity:\n\nNever activate Live Mode. Poll for new messages with a status_request message, and retrieve them when available.\nRetrieve all messages from queue, and then activate Live Mode. This simplifies message processing logic in the recipient.\nActivate Live Mode immediately upon connecting to the mediator. Retrieve messages from the queue as possible. When receiving a message delivered live, the queue may be queried for any waiting messages delivered to the same key for processing.\n\nLive Mode Change\nLive Mode is changed with a live-delivery-change message.\nMessage Type URI: https://didcomm.org/messagepickup/3.0/live-delivery-change\n{\n    \"id\": \"123456780\",\n    \"type\": \"https://didcomm.org/messagepickup/3.0/live-delivery-change\",\n    \"body\": {\n        \"live_delivery\": true\n    }\n}\n\nUpon receiving the live_delivery_change message, the mediator * MUST respond with a status message.\nIf sent with live_delivery set to true on a connection incapable of live delivery, a problem_report SHOULD be sent as follows:\n{\n  \"id\": \"123456780\",\n  \"type\": \"https://didcomm.org/report-problem/2.0/problem-report\",\n  \"pthid\": \"< the value is the thid of the thread in which the problem occurred>\",\n  \"body\": {\n        \"code\": \"e.m.live-mode-not-supported\",\n        \"comment\": \"Connection does not support Live Delivery\"\n  }\n}\n\nL10n\nNo localization is required.\nImplementations\nEndnotes"},{"slug":"report-problem/2.0/","title":"Report Problem","tags":[],"license":"MIT","publisher":"TelegramSam","avatar":"https://avatars.githubusercontent.com/u/411919?v=4&s=48","version":"2.0","status":"Production","summary":"The Report Problem protocol is defined in the DIDComm Messaging Spec. This protocol describes sending a problem report to another party.","modifiedDate":"Sat Oct 09 2021 16:31:44 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/report-problem/2.0","html":"Details\nThis Spec is defined within the didcomm-messaging spec, currently located here: https://identity.foundation/didcomm-messaging/spec/#problem-reports"},{"slug":"routing/2.0/","title":"Routing","tags":[],"license":"MIT","publisher":"TelegramSam","avatar":"https://avatars.githubusercontent.com/u/411919?v=4&s=48","version":"2.0","status":"Production","summary":"The routing protocol defined in the DIDComm Messaging Spec. This enables the message sender to package the final message on a route shared by the message recipient.","modifiedDate":"Sat Oct 09 2021 16:07:53 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/routing/2.0","html":"Details\nThis protocol is defined within the didcomm-messaging spec, currently located here: https://identity.foundation/didcomm-messaging/spec/#routing-protocol"},{"slug":"trust-ping/2.0/","title":"Trust Ping","tags":[],"license":"MIT","publisher":"TelegramSam","avatar":"https://avatars.githubusercontent.com/u/411919?v=4&s=48","version":"2.0","status":"Production","summary":"The trust-ping protocol defined in the DIDComm Messaging Spec. This enables the sender and recipient to engage in an exchange of trust pings.","modifiedDate":"Sat May 21 2022 14:16:56 GMT+0000 (Coordinated Universal Time)","piuri":"https://didcomm.org/trust-ping/2.0","html":"Details\nThis protocol is defined within the didcomm-messaging spec, currently located here: https://identity.foundation/didcomm-messaging/spec/#trust-ping-protocol-20"}],"allLicenses":["MIT"]}},
    "staticQueryHashes": ["3000541721","3766577012"]}